// scripts/generateCardData.mjs (Node.js 스크립트)
import fs from "fs/promises";
import path from "path";
import { parse } from "csv-parse/sync";

// ★★★ 설정: 네 환경에 맞게 수정 ★★★
const csvFilePath = path.resolve("src/lib/data/revue.csv"); // ★ 네 CSV 파일 경로
const outputFilePath = path.resolve("src/lib/data/cardDatabase.ts"); // ★ 생성될 TS 파일 경로
const csvColumns = {
  // ▼▼▼ 우리 코드 속성 이름 : '네 CSV 파일의 실제 열 제목' ▼▼▼
  serial: "cardlist-number", // 예: CSV 1행에 'cardlist-id' 라고 적혀 있다면
  name: "cardlist-title", // 예: CSV 1행에 'cardlist-title' 라고 적혀 있다면
  description: "cardlist-free", // 예: CSV 1행에 'cardlist-text' 라고 적혀 있다면
  imageUrl: "cardlist-img src", // 예: CSV 1행에 'cardlist-image' 라고 적혀 있다면
  atk: "cardlist-text 14", // 예: CSV 1행에 'cardlist-atk' 라고 적혀 있다면
  hp: "cardlist-text 16", // 예: CSV 1행에 'cardlist-hp' 라고 적혀 있다면
  type: "cardlist-text 10", // 예: CSV 1행에 'cardlist-type' 라고 적혀 있다면
  subtype: "cardlist-text 12", // 예: CSV 1행에 'cardlist-subtype' 라고 적혀 있다면
  // isFirstEntry 열이 있다면 그 제목도 추가
};
// ★★★ 설정 끝 ★★★

// --- 카드 타입/서브타입 변환 함수 (네 규칙에 맞게 수정) ---
function mapCardType(csvType: string): "character" | "re-birth" | "partner" {
  const lowerType = csvType?.toLowerCase(); // 소문자로 변환하여 비교 (안전)
  if (lowerType === "キャラ" || lowerType === "character") return "character";
  if (lowerType === "re-birth") return "re-birth"; // CSV 값 확인 필요
  if (lowerType === "partner") return "partner"; // CSV 값 확인 필요
  console.warn(
    `Unknown card type found: ${csvType}. Defaulting to 'character'.`
  );
  return "character"; // 모르는 값이면 기본값
}
function mapCardSubtype(
  csvSubtype: string
): "member" | "spark" | "guard" | "cancel" {
  const lowerSubtype = csvSubtype?.toLowerCase();
  if (lowerSubtype === "舞台少女" || lowerSubtype === "member") return "member"; // 예시
  if (lowerSubtype === "spark") return "spark";
  if (lowerSubtype === "guard") return "guard";
  if (lowerSubtype === "cancel") return "cancel";
  console.warn(
    `Unknown card subtype found: ${csvSubtype}. Defaulting to 'member'.`
  );
  return "member"; // 모르는 값이면 기본값
}
function determineFirstEntry(record: any): boolean {
  // CSV에 is_first_entry 열이 있다면 사용: return record['Is First Entry']?.toLowerCase() === 'true';
  // 없다면 타입/서브타입 등으로 판단하는 규칙 구현 (예시)
  // if (mapCardType(record[csvColumns.type]) === 'character' && mapCardSubtype(record[csvColumns.subtype]) === 'member') return true;
  return false; // 기본값은 false
}
// --- 변환 함수 끝 ---

async function generate() {
  try {
    console.log(`Reading CSV from: ${csvFilePath}`);
    const fileContent = await fs.readFile(csvFilePath, { encoding: "utf8" });

    const records = parse(fileContent, {
      columns: true,
      skip_empty_lines: true,
      trim: true,
    });
    console.log(`Parsed ${records.length} records from CSV.`);

    const cardDatabase = {};

    for (const record of records) {
      const serialNumber = record[csvColumns.serial];
      if (!serialNumber) {
        console.warn("Skipping record due to missing serial number:", record);
        continue;
      }

      const atk = parseInt(record[csvColumns.atk] || "0", 10);
      const hp = parseInt(record[csvColumns.hp] || "0", 10);
      const type = mapCardType(record[csvColumns.type]);
      const subtype = mapCardSubtype(record[csvColumns.subtype]);
      const isFirstEntry = determineFirstEntry(record); // is_first_entry 결정

      cardDatabase[serialNumber] = {
        name: record[csvColumns.name] || "",
        description: record[csvColumns.description] || "",
        image_url: record[csvColumns.imageUrl] || "", // ★ 경로 수정 필요 시 여기서 처리 가능
        atk: isNaN(atk) ? 0 : atk,
        hp: isNaN(hp) ? 0 : hp,
        type: type,
        subtype: subtype,
        is_first_entry: isFirstEntry,
      };
    }

    // TypeScript 파일 내용 생성 (CardDefinition 타입 정의 포함)
    const outputContent =
      `// Generated from ${path.basename(
        csvFilePath
      )} on ${new Date().toISOString()}\n` +
      `// Do not edit this file manually!\n\n` +
      `export interface CardDefinition {\n` + // 타입 이름 변경 가능
      `  name: string;\n` +
      `  description: string;\n` +
      `  image_url: string;\n` +
      `  atk: number;\n` +
      `  hp: number;\n` +
      `  type: "character" | "re-birth" | "partner";\n` +
      `  subtype: "member" | "spark" | "guard" | "cancel";\n` +
      `  is_first_entry: boolean;\n` +
      `}\n\n` +
      `export const cardDatabase: Record<string, CardDefinition> = ${JSON.stringify(
        cardDatabase,
        null,
        2
      )};\n\n` +
      `export function getCardDefinition(serialNumber: string): CardDefinition | undefined {\n` +
      `  return cardDatabase[serialNumber];\n` +
      `}\n`;

    await fs.writeFile(outputFilePath, outputContent, "utf8");
    console.log(`Successfully generated card database at: ${outputFilePath}`);
  } catch (error) {
    console.error("Error generating card data:", error);
  }
}

generate(); // 스크립트 실행
